"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import json
import os
from pathlib import Path

from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

dotenv_path = BASE_DIR / ".env"
try:
    if dotenv_path.exists():
        load_dotenv(dotenv_path)
except Exception as e:
    print(str(e))

secret_path = BASE_DIR / "secrets.json"
try:
    if secret_path.exists():
        with open(secret_path) as f:
            secrets = json.load(f)
except Exception as e:
    print(str(e))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = secrets["SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS: list[str] = [
    "senior-naeil.life",
    "www.senior-naeil.life",
    "211.188.53.238",
    "1zari.kro.kr",
    "senior-tomorrow.kro.kr",
]

# Application definition

INSTALLED_APPS = [
    # own
    "utils",
    "user",
    "job_posting",
    "resume",
    "search",
    # django
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.gis",
    # "django_extensions",
    "corsheaders",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    #"django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": os.environ.get("DB_NAME"),
        "USER": os.environ.get("DB_USER"),
        "PASSWORD": os.environ.get("DB_PASSWORD"),
        "HOST": os.environ.get("DB_HOST"),
        "PORT": os.environ.get("DB_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

APPEND_SLASH = True

AUTH_USER_MODEL = "user.CommonUser"

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

JWT_SECRET_KEY = secrets["JWT_SECRET_KEY"]
KOREA_TAX_API_KEY = secrets["KOREA_TAX_API_KEY"]

# jwt setting
JWT_ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60  # Access Token 만료 시간 (분)
REFRESH_TOKEN_EXPIRE_DAYS = 1  # Refresh Token 만료 시간 (일)

NAVER_CLIENT_ID = secrets["naver"]["client_id"]
NAVER_SECRET = secrets["naver"]["secret"]
NAVER_REDIRECT_URL = secrets["naver"]["redirect_url"]


KAKAO_CLIENT_ID = secrets["kakao"]["client_id"]
KAKAO_SECRET = secrets["kakao"]["secret"]
KAKAO_REDIRECT_URL = secrets["kakao"]["redirect_url"]

aligo_api_key = secrets["aligo"]["api_key"]
aligo_user_id = secrets["aligo"]["user_id"]
aligo_sender = secrets["aligo"]["sender"]

# NCP object storage 서비스
NCP_S3_ENDPOINT = secrets["NCP_S3_ENDPOINT"]
NCP_S3_ACCESS_KEY = secrets["NCP_S3_ACCESS_KEY"]
NCP_S3_SECRET_KEY = secrets["NCP_S3_SECRET_KEY"]
NCP_S3_BUCKET_NAME = secrets["NCP_S3_BUCKET_NAME"]

REDIS_PORT = os.environ.get("REDIS_PORT")
REDIS_HOST = os.environ.get("REDIS_HOST")
REDIS_DB = os.environ.get("REDIS_DB")
REDIS_PASSWORD = os.environ.get("REDIS_PASSWORD")

ALIGO_API_URL = os.getenv("ALIGO_API_URL")
KOREA_TAX_API_URL = os.getenv("KOREA_TAX_API_URL")

KAKAO_TOKEN_URL = os.getenv("KAKAO_TOKEN_URL") or ""
KAKAO_USER_INFO_URL = os.getenv("KAKAO_USER_INFO_URL") or ""

NAVER_TOKEN_URL = os.getenv("NAVER_TOKEN_URL") or ""
NAVER_USER_INFO_URL = os.getenv("NAVER_USER_INFO_URL") or ""


# CSRF 설정
CSRF_TRUSTED_ORIGINS = [
    "https://senior-naeil.life",  # 백엔드 도메인(API server)
    "https://senior-tomorrow.kro.kr",  # 프론트 도메인
    "https://1zari.kro.kr",  # 프론트 도메인
    "http://127.0.0.1:3000",
    "http://localhost:3000",
]
CSRF_COOKIE_SECURE = True  # SSL 적용시 True 해야함.
CSRF_COOKIE_HTTPONLY = False
CSRF_COOKIE_SAMESITE = "Lax"
CORS_ALLOW_CREDENTIALS = True


# CORS 설정
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "https://senior-tomorrow.kro.kr",
    "https://1zari.kro.kr",
    "https://senior-tomorrow.vercel.app",
    "https://senior-naeil.life",
    "https://www.senior-naeil.life",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

# LOGGING 설정
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
}
